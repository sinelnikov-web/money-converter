{"version":3,"sources":["logo.svg","Components/Header/Header.jsx","api/exchange-api.js","redux/exchange-rate-reducer.js","Components/CurrencyListItem/CurrencyListItem.jsx","Components/ExchangeRate/ExchangeRateResultItem/ExchangeRateResultItem.jsx","Components/ExchangeRate/ExchangeRate.jsx","redux/exchange-reducer.js","Components/Exchange/Exchange.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["Header","title","buttonText","buttonHref","className","to","APIInstance","axios","create","baseURL","exchangeAPI","baseCurrency","get","then","r","data","fromCurrencyName","toCurrencyName","amount","GET_RATE_SUCCESS","START_CURRENCY_RATE_UPDATE","STOP_CURRENCY_RATE_UPDATE","GET_COUNTRY_CODES_SUCCESS","START_FETCHING","STOP_FETCHING","initialState","exchangeRateResult","base","date","rates","countryCodes","isFetching","isCurrencyUpdate","getCurrencyRate","dispatch","a","type","response","payload","CurrencyListItem","clickHandler","currencyName","onClick","ExchangeRateResultItem","countryCode","currencyValue","src","alt","ExchangeRate","currencyCodesToCountryCodes","Object","keys","countryCodesToCurrencyCodes","forEach","code","exchangeRate","useSelector","state","useState","isOpen","setIsOpen","localStorage","getItem","setBaseCurrency","useDispatch","useEffect","map","curr","onBaseCurrencyChange","setItem","prev","newState","value","readOnly","index","rateName","START_UPDATING","STOP_UPDATING","CHANGE_SUCCESS","isUpdating","changeResult","startFetching","stopFetching","changeCurrencySuccess","Exchange","exchange","from","setAmount","baseCurrencyTo","debouncedChange","useCallback","debounce","getChangeValue","onToCurrencyChange","onFromCurrencyChange","onChange","e","target","values","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1a4149b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = ({title, buttonText, buttonHref}) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <div className=\"header-wrapper\">\r\n                    <span className=\"page__title\">{title}</span>\r\n                    <nav className=\"nav\">\r\n                        <Link to={buttonHref} className=\"nav__btn\">{buttonText}</Link>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import axios from \"axios\";\r\n\r\n\r\nconst APIInstance = axios.create({\r\n    baseURL: 'https://api.frankfurter.app/'\r\n})\r\n\r\nexport const exchangeAPI = {\r\n    getCurrencyRate: (baseCurrency) => {\r\n        return APIInstance.get(`latest?from=${baseCurrency}`).then(r => r.data)\r\n    },\r\n    getChangeValue: (fromCurrencyName, toCurrencyName, amount) => {\r\n        return APIInstance.get(`latest?amount=${amount}&from=${fromCurrencyName}&to=${toCurrencyName}`).then(r => r.data)\r\n    },\r\n    getCountryCodes: () => {\r\n        return axios.get('http://localhost:3000/assets/json/currency.json', {\r\n            withCredentials: true\r\n        }).then(r => r.data)\r\n    }\r\n}","import {exchangeAPI} from \"../api/exchange-api\";\r\n\r\nconst GET_RATE_SUCCESS = 'GET_RATE_SUCCESS'\r\nconst START_CURRENCY_RATE_UPDATE = 'START_CURRENCY_RATE_UPDATE'\r\nconst STOP_CURRENCY_RATE_UPDATE = 'START_CURRENCY_RATE_UPDATE'\r\nconst GET_COUNTRY_CODES_SUCCESS = 'GET_COUNTRY_CODES_SUCCESS'\r\nconst START_FETCHING = 'START_FETCHING'\r\nconst STOP_FETCHING = 'STOP_FETCHING'\r\n\r\nconst initialState = {\r\n    exchangeRateResult: {\r\n        amount: 1,\r\n        base: null,\r\n        date: null,\r\n        rates: {}\r\n    },\r\n    countryCodes: {},\r\n    isFetching: false,\r\n    isCurrencyUpdate: false\r\n}\r\n\r\nexport const exchangeRateReducer = (state = initialState, action) => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case GET_RATE_SUCCESS: {\r\n            return {...state, exchangeRateResult: {...payload, rates: {...payload.rates}}}\r\n        }\r\n        case START_CURRENCY_RATE_UPDATE: {\r\n            return {...state, isCurrencyUpdate: true}\r\n        }\r\n        case STOP_CURRENCY_RATE_UPDATE: {\r\n            return {...state, isCurrencyUpdate: false}\r\n        }\r\n        case GET_COUNTRY_CODES_SUCCESS: {\r\n            return {...state, countryCodes: {...payload}}\r\n        }\r\n        case START_FETCHING: {\r\n            return {...state, isFetching: true}\r\n        }\r\n        case STOP_FETCHING: {\r\n            return {...state, isFetching: false}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst startFetching = () => {\r\n    return {\r\n        type: START_FETCHING\r\n    }\r\n}\r\n\r\nconst stopFetching = () => {\r\n    return {\r\n        type: STOP_FETCHING\r\n    }\r\n}\r\n\r\nconst startCurrencyRateUpdate = () => {\r\n    return {\r\n        type: START_CURRENCY_RATE_UPDATE\r\n    }\r\n}\r\n\r\nconst getExchangeRateSuccess = (payload) => {\r\n    return {\r\n        type: GET_RATE_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\nexport const getCurrencyRate = (baseCurrency) => async (dispatch) => {\r\n    dispatch(startFetching())\r\n    const response = await exchangeAPI.getCurrencyRate(baseCurrency)\r\n    dispatch(getExchangeRateSuccess(response))\r\n    dispatch(stopFetching())\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst CurrencyListItem = ({clickHandler, currencyName}) => {\r\n    return (\r\n        <li\r\n            onClick={() => clickHandler(currencyName)}\r\n            className=\"select__item\">\r\n            <span>{currencyName}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default CurrencyListItem;","import React from 'react';\r\n\r\nconst ExchangeRateResultItem = ({countryCode, currencyName, currencyValue}) => {\r\n    return (\r\n        <li className=\"converter__item\">\r\n            <img\r\n                src={`https://www.countryflags.io/${countryCode}/flat/64.png`}\r\n                alt=\"\" className=\"converter__flag\"/>\r\n            <span className=\"converter__currency\">{currencyName}</span>\r\n            <span className=\"converter__value\">{currencyValue}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default ExchangeRateResultItem;","import React, {useEffect, useState} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport countryCodesToCurrencyCodes from '../../assets/json/currency.json'\r\nimport Header from \"../Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCountryCodes, getCurrencyRate} from \"../../redux/exchange-rate-reducer\";\r\nimport CurrencyListItem from \"../CurrencyListItem/CurrencyListItem\";\r\nimport ExchangeRateResultItem from \"./ExchangeRateResultItem/ExchangeRateResultItem\";\r\n\r\nconst ExchangeRate = () => {\r\n\r\n    const currencyCodesToCountryCodes = {}\r\n    Object.keys(countryCodesToCurrencyCodes).forEach(code => currencyCodesToCountryCodes[countryCodesToCurrencyCodes[code]] = code)\r\n\r\n    const exchangeRate = useSelector(state => state.exchangeRate)\r\n\r\n    const rates = exchangeRate.exchangeRateResult.rates\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [baseCurrency, setBaseCurrency] = useState(() => {\r\n        let baseCurrency = localStorage.getItem('baseCurrency') || \"RUB\"\r\n        return {\r\n            'RUB': 'RUB' === baseCurrency,\r\n            'EUR': 'EUR' === baseCurrency,\r\n            'USD': 'USD' === baseCurrency,\r\n            'CNY': 'CNY' === baseCurrency,\r\n        }\r\n    })\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        Object.keys(baseCurrency).map(curr => {\r\n            if (baseCurrency[curr]) {\r\n                dispatch(getCurrencyRate(curr))\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const onBaseCurrencyChange = (currencyName) => {\r\n        dispatch(getCurrencyRate(currencyName))\r\n        localStorage.setItem('baseCurrency', currencyName)\r\n        setBaseCurrency(prev => {\r\n            let newState = {...prev}\r\n            Object.keys(newState).forEach(curr => {\r\n                newState[curr] = curr === currencyName;\r\n            })\r\n            return newState\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"page-wrapper\">\r\n            <Header title={'Курс валют'} buttonText={'Обмен валют'} buttonHref={'/exchange'}/>\r\n            <main className=\"main\">\r\n                <div className=\"container\">\r\n                    <section className=\"converter\">\r\n                        <h1 className=\"converter__title\">Текущий курс валют</h1>\r\n                        <div className=\"converter__body\">\r\n                            <div className=\"converter__controls\">\r\n                                <input type=\"text\" className=\"input-field\" value=\"1\" readOnly/>\r\n                                <div onClick={() => setIsOpen(!isOpen)} className={\"select\" + (isOpen ? ' open' : '')}>\r\n                                    <div className=\"select__selected\"><span>{Object.keys(baseCurrency).map(curr => {\r\n                                        if (baseCurrency[curr]) {\r\n                                            return curr\r\n                                        }\r\n                                    })}</span></div>\r\n                                    <ul className=\"select__list\">\r\n                                        {Object.keys(baseCurrency).map((curr, index) => {\r\n                                            if (!baseCurrency[curr]) {\r\n                                                return (\r\n                                                    <CurrencyListItem\r\n                                                        key={index}\r\n                                                        clickHandler={onBaseCurrencyChange}\r\n                                                        currencyName={curr}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"converter__results\">\r\n                                <ul className=\"converter__list\">\r\n                                    {exchangeRate.isFetching\r\n                                        ?\r\n                                        <div className={`loading-wrapper` + (exchangeRate.isFetching ? ' loading' : '')}/>\r\n                                            :\r\n                                            Object.keys(rates).map((rateName, index) => {\r\n                                            return (\r\n                                                <ExchangeRateResultItem\r\n                                                    key={index}\r\n                                                    currencyName={rateName}\r\n                                                    currencyValue={rates[rateName]}\r\n                                                    countryCode={currencyCodesToCountryCodes[rateName]}\r\n                                                />\r\n                                            )\r\n                                        })}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExchangeRate;","import {exchangeAPI} from \"../api/exchange-api\";\r\n\r\nconst START_FETCHING = 'START_FETCHING'\r\nconst STOP_FETCHING = 'STOP_FETCHING'\r\nconst START_UPDATING = 'START_UPDATING'\r\nconst STOP_UPDATING = 'STOP_UPDATING'\r\nconst CHANGE_SUCCESS = 'CHANGE_SUCCESS'\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    isUpdating: false,\r\n    changeResult: {\r\n        rates: null\r\n    }\r\n}\r\n\r\nexport const exchangeReudcer = (state = initialState, action) => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case CHANGE_SUCCESS: {\r\n            return {...state, changeResult: {rates: {...payload.rates}}}\r\n        }\r\n        case START_FETCHING: {\r\n            return {...state, isFetching: true}\r\n        }\r\n        case STOP_FETCHING: {\r\n            return {...state, isFetching: false}\r\n        }\r\n        case START_UPDATING: {\r\n            return {...state, isUpdating: true}\r\n        }\r\n        case STOP_UPDATING: {\r\n            return {...state, isUpdating: false}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst startFetching = () => {\r\n    return {\r\n        type: START_FETCHING\r\n    }\r\n}\r\nconst stopFetching = () => {\r\n    return {\r\n        type: STOP_FETCHING\r\n    }\r\n}\r\n\r\nconst changeCurrencySuccess = (payload) => {\r\n    return {\r\n        type: CHANGE_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const getChangeValue = (fromCurrencyName, toCurrencyName, amount=1) => async (dispatch) => {\r\n    dispatch(startFetching())\r\n    const response = await exchangeAPI.getChangeValue(fromCurrencyName, toCurrencyName, amount)\r\n    dispatch(changeCurrencySuccess(response))\r\n    dispatch(stopFetching())\r\n}","import React, {useCallback, useEffect, useState} from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport CurrencyListItem from \"../CurrencyListItem/CurrencyListItem\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getChangeValue} from \"../../redux/exchange-reducer\";\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst Exchange = () => {\r\n\r\n    const exchange = useSelector(state => state.exchange)\r\n\r\n    const [isOpen, setIsOpen] = useState({\r\n        from: false,\r\n        to: false\r\n    })\r\n\r\n    const [amount, setAmount] = useState(1)\r\n\r\n    const [baseCurrency, setBaseCurrency] = useState(() => {\r\n        let baseCurrency = localStorage.getItem('baseCurrencyFrom') || \"RUB\"\r\n        let baseCurrencyTo = localStorage.getItem('baseCurrencyTo') || \"EUR\"\r\n        return {\r\n            'RUB': {from: 'RUB' === baseCurrency, to: 'RUB' === baseCurrencyTo},\r\n            'EUR': {from: 'EUR' === baseCurrency, to: 'EUR' === baseCurrencyTo},\r\n            'USD': {from: 'USD' === baseCurrency, to: 'USD' === baseCurrencyTo},\r\n            'CNY': {from: 'CNY' === baseCurrency, to: 'CNY' === baseCurrencyTo},\r\n        }\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const debouncedChange = useCallback(\r\n        debounce((fromCurrencyName, toCurrencyName, amount) => dispatch(getChangeValue(fromCurrencyName, toCurrencyName, amount)), 500), []\r\n    )\r\n\r\n    useEffect(() => {\r\n        let fromCurrencyName = null\r\n        let toCurrencyName = null\r\n        Object.keys(baseCurrency).forEach(currencyName => {\r\n            if (baseCurrency[currencyName].to) {\r\n                toCurrencyName = currencyName\r\n            } else if (baseCurrency[currencyName].from) {\r\n                fromCurrencyName = currencyName\r\n            }\r\n        })\r\n        debouncedChange(fromCurrencyName, toCurrencyName, amount)\r\n    }, [baseCurrency, amount])\r\n\r\n    const onToCurrencyChange = (currencyName) => {\r\n        localStorage.setItem('baseCurrencyTo', currencyName)\r\n        setBaseCurrency(prev => {\r\n            let newState = {...prev}\r\n            Object.keys(newState).forEach(curr => {\r\n                newState[curr].to = curr === currencyName;\r\n            })\r\n            return newState\r\n        })\r\n    }\r\n\r\n    const onFromCurrencyChange = (currencyName) => {\r\n        localStorage.setItem('baseCurrencyFrom', currencyName)\r\n        setBaseCurrency(prev => {\r\n            let newState = {...prev}\r\n            Object.keys(newState).forEach(curr => {\r\n                newState[curr].from = curr === currencyName;\r\n            })\r\n            return newState\r\n        })\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setAmount(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"page-wrapper\">\r\n            <Header title={'Обмен валют'} buttonText={'Курс валют'} buttonHref={'/exchange_rate'}/>\r\n            <main className=\"main\">\r\n                <div className=\"container\">\r\n                    <section className=\"converter\">\r\n                        <h1 className=\"converter__title\">Текущий курс валют</h1>\r\n                        <div className=\"converter__body\">\r\n                            <div className=\"converter__controls exchange\">\r\n                                <input onChange={onChange} type=\"number\" className=\"input-field\" value={amount}/>\r\n                                <div onClick={() => setIsOpen(prev => ({...prev, from: !prev.from}))} className={\"select\" + (isOpen.from ? ' open' : '')}>\r\n                                    <div className=\"select__selected\"><span>{Object.keys(baseCurrency).map(curr => {\r\n                                        if (baseCurrency[curr].from) {\r\n                                            return curr\r\n                                        }\r\n                                    })}</span></div>\r\n                                    <ul className=\"select__list\">\r\n                                        {Object.keys(baseCurrency).map((curr, index) => {\r\n                                            if (!baseCurrency[curr].from  && !baseCurrency[curr].to) {\r\n                                                return (\r\n                                                    <CurrencyListItem\r\n                                                        key={index}\r\n                                                        clickHandler={onFromCurrencyChange}\r\n                                                        currencyName={curr}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"converter__controls result\">\r\n                                <div className={`loading-wrapper` + (exchange.isFetching ? ' loading' : '')}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"input-field\"\r\n                                        value={exchange.changeResult.rates && !exchange.isFetching ? Object.values(exchange.changeResult.rates)[0] : ''}\r\n                                        readOnly\r\n                                    />\r\n                                </div>\r\n                                <div onClick={() => setIsOpen(prev => ({...prev, to: !prev.to}))} className={\"select\" + (isOpen.to ? ' open' : '')}>\r\n                                    <div className=\"select__selected\"><span>{Object.keys(baseCurrency).map(curr => {\r\n                                        if (baseCurrency[curr].to) {\r\n                                            return curr\r\n                                        }\r\n                                    })}</span></div>\r\n                                    <ul className=\"select__list\">\r\n                                        {Object.keys(baseCurrency).map((curr, index) => {\r\n                                            if (!baseCurrency[curr].to && !baseCurrency[curr].from) {\r\n                                                return (\r\n                                                    <CurrencyListItem\r\n                                                        key={index}\r\n                                                        clickHandler={onToCurrencyChange}\r\n                                                        currencyName={curr}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Exchange;","import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Switch, Route, Redirect, HashRouter} from \"react-router-dom\";\nimport ExchangeRate from \"./Components/ExchangeRate/ExchangeRate\";\nimport Exchange from \"./Components/Exchange/Exchange\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HashRouter>\n            <Switch>\n                <Route exact path={'/exchange_rate'} component={ExchangeRate}/>\n                <Route exact path={'/exchange'} component={Exchange}/>\n                <Route path={'/'}>\n                    <Redirect to={'/exchange_rate'}/>\n                </Route>\n            </Switch>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {exchangeRateReducer} from \"./exchange-rate-reducer\";\r\nimport {exchangeReudcer} from \"./exchange-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    exchangeRate: exchangeRateReducer,\r\n    exchange: exchangeReudcer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}