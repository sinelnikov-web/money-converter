{"version":3,"sources":["Components/Header/Header.tsx","api/exchange-api.ts","redux/exchange-rate-reducer.ts","Components/CurrencyListItem/CurrencyListItem.tsx","Components/ExchangeRate/ExchangeRateResultItem/ExchangeRateResultItem.tsx","Components/ExchangeRate/ExchangeRate.tsx","redux/exchange-reducer.ts","Components/Exchange/Exchange.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["Header","title","buttonText","buttonHref","className","to","APIInstance","axios","create","baseURL","exchangeAPI","baseCurrency","get","then","r","data","fromCurrencyName","toCurrencyName","amount","GET_RATE_SUCCESS","START_CURRENCY_RATE_UPDATE","STOP_CURRENCY_RATE_UPDATE","GET_COUNTRY_CODES_SUCCESS","START_FETCHING","STOP_FETCHING","initialState","exchangeRateResult","base","date","rates","countryCodes","isFetching","isCurrencyUpdate","actions","type","payload","getCurrencyRate","dispatch","a","response","CurrencyListItem","clickHandler","currencyName","onClick","ExchangeRateResultItem","countryCode","currencyValue","src","alt","ExchangeRate","currencyCodesToCountryCodes","Object","keys","countryCodesToCurrencyCodes","forEach","code","exchangeRate","useSelector","state","useState","isOpen","setIsOpen","localStorage","getItem","RUB","EUR","USD","CNY","setBaseCurrency","useDispatch","useEffect","map","curr","onBaseCurrencyChange","setItem","prev","newState","value","readOnly","index","rateName","START_UPDATING","STOP_UPDATING","CHANGE_SUCCESS","isUpdating","changeResult","Exchange","exchange","from","setAmount","baseCurrencyTo","debouncedChange","useCallback","debounce","getChangeValue","onToCurrencyChange","onFromCurrencyChange","onChange","e","parseInt","target","values","App","exact","path","component","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d171b905.chunk.js","sourcesContent":["import {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\ninterface HeaderPropsType {\r\n    title: string\r\n    buttonText: string\r\n    buttonHref: string\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = ({title, buttonText, buttonHref}) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <div className=\"header-wrapper\">\r\n                    <span className=\"page__title\">{title}</span>\r\n                    <nav className=\"nav\">\r\n                        <Link to={buttonHref} className=\"nav__btn\">{buttonText}</Link>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import axios from \"axios\";\r\n\r\n\r\nconst APIInstance = axios.create({\r\n    baseURL: 'https://api.frankfurter.app/'\r\n})\r\n\r\nexport type ChangeResponseType = {\r\n    amount: number\r\n    base: string,\r\n    date: string,\r\n    rates: {\r\n        RUB: number,\r\n        EUR: number,\r\n        USD: number,\r\n        CNY: number,\r\n    },\r\n}\r\n\r\nexport const exchangeAPI = {\r\n    getCurrencyRate: (baseCurrency: string) => {\r\n        return APIInstance.get<ChangeResponseType>(`latest?from=${baseCurrency}`).then(r => r.data)\r\n    },\r\n    getChangeValue: (fromCurrencyName: string, toCurrencyName: string, amount: number) => {\r\n        return APIInstance.get<ChangeResponseType>(`latest?amount=${amount}&from=${fromCurrencyName}&to=${toCurrencyName}`).then(r => r.data)\r\n    },\r\n    getCountryCodes: () => {\r\n        return axios.get('http://localhost:3000/assets/json/currency.json', {\r\n            withCredentials: true\r\n        }).then(r => r.data)\r\n    }\r\n}","import {ChangeResponseType, exchangeAPI} from \"../api/exchange-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst GET_RATE_SUCCESS = 'GET_RATE_SUCCESS'\r\nconst START_CURRENCY_RATE_UPDATE = 'START_CURRENCY_RATE_UPDATE'\r\nconst STOP_CURRENCY_RATE_UPDATE = 'START_CURRENCY_RATE_UPDATE'\r\nconst GET_COUNTRY_CODES_SUCCESS = 'GET_COUNTRY_CODES_SUCCESS'\r\nconst START_FETCHING = 'START_FETCHING'\r\nconst STOP_FETCHING = 'STOP_FETCHING'\r\n\r\nconst initialState = {\r\n    exchangeRateResult: {\r\n        amount: 1,\r\n        base: '',\r\n        date: '',\r\n        rates: {}\r\n    } as ChangeResponseType,\r\n    countryCodes: {},\r\n    isFetching: false,\r\n    isCurrencyUpdate: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const exchangeRateReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case GET_RATE_SUCCESS: {\r\n            return <InitialStateType>{...state, exchangeRateResult: {...payload, rates: {...payload?.rates}}}\r\n        }\r\n        case START_CURRENCY_RATE_UPDATE: {\r\n            return {...state, isCurrencyUpdate: true}\r\n        }\r\n        case STOP_CURRENCY_RATE_UPDATE: {\r\n            return {...state, isCurrencyUpdate: false}\r\n        }\r\n        case GET_COUNTRY_CODES_SUCCESS: {\r\n            return {...state, countryCodes: {...payload}}\r\n        }\r\n        case START_FETCHING: {\r\n            return {...state, isFetching: true}\r\n        }\r\n        case STOP_FETCHING: {\r\n            return {...state, isFetching: false}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    startFetching: () => {\r\n        return {\r\n            type: START_FETCHING\r\n        }\r\n    },\r\n    stopFetching: () => {\r\n        return {\r\n            type: STOP_FETCHING\r\n        }\r\n    },\r\n    startCurrencyRateUpdate: () => {\r\n        return {\r\n            type: START_CURRENCY_RATE_UPDATE\r\n        }\r\n    },\r\n    getExchangeRateSuccess: (payload: ChangeResponseType) => {\r\n        return {\r\n            type: GET_RATE_SUCCESS,\r\n            payload\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsTypes = 'STOP_FETCHING' | 'START_FETCHING' | 'GET_COUNTRY_CODES_SUCCESS' | 'START_CURRENCY_RATE_UPDATE' | 'GET_RATE_SUCCESS'\r\n\r\ntype ActionType = {\r\n    type: ActionsTypes,\r\n    payload?: ChangeResponseType\r\n}\r\n\r\nexport const getCurrencyRate = (baseCurrency: string) => async (dispatch: Dispatch) => {\r\n    dispatch(actions.startFetching())\r\n    const response = await exchangeAPI.getCurrencyRate(baseCurrency)\r\n    dispatch(actions.getExchangeRateSuccess(response))\r\n    dispatch(actions.stopFetching())\r\n}\r\n\r\n\r\n","import React from \"react\";\r\n\r\ninterface CurrencyListItem {\r\n    clickHandler: (currencyName: string) => void,\r\n    currencyName: string\r\n}\r\n\r\nconst CurrencyListItem: React.FC<CurrencyListItem> = ({clickHandler, currencyName}) => {\r\n    return (\r\n        <li\r\n            onClick={() => clickHandler(currencyName)}\r\n            className=\"select__item\">\r\n            <span>{currencyName}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default CurrencyListItem;","import React from \"react\";\r\n\r\ninterface ExchangeRateResultItemProps {\r\n    countryCode: string\r\n    currencyName: string\r\n    currencyValue: number\r\n}\r\n\r\nconst ExchangeRateResultItem: React.FC<ExchangeRateResultItemProps> = ({countryCode, currencyName, currencyValue}) => {\r\n    return (\r\n        <li className=\"converter__item\">\r\n            <img\r\n                src={`https://www.countryflags.io/${countryCode}/flat/64.png`}\r\n                alt=\"\" className=\"converter__flag\"/>\r\n            <span className=\"converter__currency\">{currencyName}</span>\r\n            <span className=\"converter__value\">{currencyValue}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default ExchangeRateResultItem;","import React, {useEffect, useState} from 'react';\r\nimport countryCodesToCurrencyCodes from '../../assets/json/currency.json'\r\nimport Header from \"../Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrencyRate} from \"../../redux/exchange-rate-reducer\";\r\nimport CurrencyListItem from \"../CurrencyListItem/CurrencyListItem\";\r\nimport ExchangeRateResultItem from \"./ExchangeRateResultItem/ExchangeRateResultItem\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\nexport type CurrencyTypes = 'RUB' | 'EUR' | 'USD' | 'CNY'\r\n\r\ntype BaseCurrencyType = {\r\n    RUB: boolean,\r\n    EUR: boolean,\r\n    USD: boolean,\r\n    CNY: boolean,\r\n}\r\n\r\nconst ExchangeRate: React.FC = () => {\r\n\r\n    const currencyCodesToCountryCodes = {}\r\n    // @ts-ignore\r\n    Object.keys(countryCodesToCurrencyCodes).forEach(code => currencyCodesToCountryCodes[countryCodesToCurrencyCodes[code]] = code)\r\n\r\n    const exchangeRate = useSelector((state:AppStateType) => state.exchangeRate)\r\n\r\n    const rates = exchangeRate.exchangeRateResult.rates\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [baseCurrency, setBaseCurrency] = useState<BaseCurrencyType>(() => {\r\n        let baseCurrency = localStorage.getItem('baseCurrency') || \"RUB\"\r\n        return {\r\n            RUB: 'RUB' === baseCurrency,\r\n            EUR: 'EUR' === baseCurrency,\r\n            USD: 'USD' === baseCurrency,\r\n            CNY: 'CNY' === baseCurrency,\r\n        }\r\n    })\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        Object.keys(baseCurrency).map((curr) => {\r\n            if (baseCurrency[curr as CurrencyTypes]) {\r\n                dispatch(getCurrencyRate(curr))\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const onBaseCurrencyChange = (currencyName: string) => {\r\n        dispatch(getCurrencyRate(currencyName))\r\n        localStorage.setItem('baseCurrency', currencyName)\r\n        setBaseCurrency(prev => {\r\n            let newState = {...prev}\r\n            Object.keys(newState).forEach(curr => {\r\n                newState[curr as CurrencyTypes] = curr === currencyName;\r\n            })\r\n            return newState\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"page-wrapper\">\r\n            <Header title={'Курс валют'} buttonText={'Обмен валют'} buttonHref={'/exchange'}/>\r\n            <main className=\"main\">\r\n                <div className=\"container\">\r\n                    <section className=\"converter\">\r\n                        <h1 className=\"converter__title\">Текущий курс валют</h1>\r\n                        <div className=\"converter__body\">\r\n                            <div className=\"converter__controls\">\r\n                                <input type=\"text\" className=\"input-field\" value=\"1\" readOnly/>\r\n                                <div onClick={() => setIsOpen(!isOpen)} className={\"select\" + (isOpen ? ' open' : '')}>\r\n                                    <div className=\"select__selected\"><span>{Object.keys(baseCurrency).map(curr => {\r\n                                        if (baseCurrency[curr as CurrencyTypes]) {\r\n                                            return curr\r\n                                        }\r\n                                    })}</span></div>\r\n                                    <ul className=\"select__list\">\r\n                                        {Object.keys(baseCurrency).map((curr, index) => {\r\n                                            if (!baseCurrency[curr as CurrencyTypes]) {\r\n                                                return (\r\n                                                    <CurrencyListItem\r\n                                                        key={index}\r\n                                                        clickHandler={onBaseCurrencyChange}\r\n                                                        currencyName={curr}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"converter__results\">\r\n                                <ul className=\"converter__list\">\r\n                                    {exchangeRate.isFetching\r\n                                        ?\r\n                                        <div className={`loading-wrapper` + (exchangeRate.isFetching ? ' loading' : '')}/>\r\n                                            :\r\n                                            Object.keys(rates).map((rateName, index) => {\r\n                                                return (\r\n                                                <ExchangeRateResultItem\r\n                                                    key={index}\r\n                                                    currencyName={rateName}\r\n                                                    currencyValue={rates[rateName as CurrencyTypes]}\r\n                                                    // @ts-ignore\r\n                                                    countryCode={currencyCodesToCountryCodes[rateName]}\r\n                                                />\r\n                                            )\r\n                                        })}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExchangeRate;","import {ChangeResponseType, exchangeAPI} from \"../api/exchange-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {InferActionTypes} from \"./store\";\r\n\r\nconst START_FETCHING = 'START_FETCHING'\r\nconst STOP_FETCHING = 'STOP_FETCHING'\r\nconst START_UPDATING = 'START_UPDATING'\r\nconst STOP_UPDATING = 'STOP_UPDATING'\r\nconst CHANGE_SUCCESS = 'CHANGE_SUCCESS'\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    isUpdating: false,\r\n    changeResult: {\r\n        rates: {}\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const exchangeReudcer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case CHANGE_SUCCESS: {\r\n            return {...state, changeResult: {rates: {...payload}}}\r\n        }\r\n        case START_FETCHING: {\r\n            return {...state, isFetching: true}\r\n        }\r\n        case STOP_FETCHING: {\r\n            return {...state, isFetching: false}\r\n        }\r\n        case START_UPDATING: {\r\n            return {...state, isUpdating: true}\r\n        }\r\n        case STOP_UPDATING: {\r\n            return {...state, isUpdating: false}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    startFetching: (): ActionType => {\r\n        return {\r\n            type: START_FETCHING\r\n        }\r\n    },\r\n    stopFetching: (): ActionType => {\r\n        return {\r\n            type: STOP_FETCHING\r\n        }\r\n    },\r\n    changeCurrencySuccess: (payload: ChangeResponseType): ActionType => {\r\n        return {\r\n            type: CHANGE_SUCCESS,\r\n            payload: payload\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsTypes = 'CHANGE_SUCCESS' | 'STOP_UPDATING' | 'STOP_FETCHING' | 'START_UPDATING' | 'START_FETCHING'\r\n\r\ntype ActionType = {\r\n    type: ActionsTypes\r\n    payload?: ChangeResponseType\r\n}\r\n\r\n\r\nexport const getChangeValue = (fromCurrencyName: string, toCurrencyName: string, amount: number=1) => async (dispatch: Dispatch) => {\r\n    dispatch(actions.startFetching())\r\n    const response = await exchangeAPI.getChangeValue(fromCurrencyName, toCurrencyName, amount)\r\n    dispatch(actions.changeCurrencySuccess(response))\r\n    dispatch(actions.stopFetching())\r\n}","import * as React from 'react';\r\nimport {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport CurrencyListItem from \"../CurrencyListItem/CurrencyListItem\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getChangeValue} from \"../../redux/exchange-reducer\";\r\nimport debounce from 'lodash.debounce';\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {CurrencyTypes} from \"../ExchangeRate/ExchangeRate\";\r\nimport {ChangeResponseType} from \"../../api/exchange-api\";\r\n\r\n\r\nconst Exchange: React.FC = () => {\r\n\r\n    const exchange = useSelector((state: AppStateType) => state.exchange)\r\n\r\n    const [isOpen, setIsOpen] = useState({\r\n        from: false,\r\n        to: false\r\n    })\r\n\r\n    const [amount, setAmount] = useState(1)\r\n\r\n    const [baseCurrency, setBaseCurrency] = useState(() => {\r\n        let baseCurrency = localStorage.getItem('baseCurrencyFrom') || \"RUB\"\r\n        let baseCurrencyTo = localStorage.getItem('baseCurrencyTo') || \"EUR\"\r\n        return {\r\n            'RUB': {from: 'RUB' === baseCurrency, to: 'RUB' === baseCurrencyTo},\r\n            'EUR': {from: 'EUR' === baseCurrency, to: 'EUR' === baseCurrencyTo},\r\n            'USD': {from: 'USD' === baseCurrency, to: 'USD' === baseCurrencyTo},\r\n            'CNY': {from: 'CNY' === baseCurrency, to: 'CNY' === baseCurrencyTo},\r\n        }\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const debouncedChange = useCallback(\r\n        debounce((fromCurrencyName, toCurrencyName, amount) => dispatch(getChangeValue(fromCurrencyName, toCurrencyName, amount)), 500), []\r\n    )\r\n\r\n    useEffect(() => {\r\n        let fromCurrencyName = null\r\n        let toCurrencyName = null\r\n        Object.keys(baseCurrency).forEach(currencyName => {\r\n            if (baseCurrency[currencyName as CurrencyTypes].to) {\r\n                toCurrencyName = currencyName\r\n            } else if (baseCurrency[currencyName as CurrencyTypes].from) {\r\n                fromCurrencyName = currencyName\r\n            }\r\n        })\r\n        debouncedChange(fromCurrencyName, toCurrencyName, amount)\r\n    }, [baseCurrency, amount])\r\n\r\n    const onToCurrencyChange = (currencyName: string) => {\r\n        localStorage.setItem('baseCurrencyTo', currencyName)\r\n        setBaseCurrency(prev => {\r\n            let newState = {...prev}\r\n            Object.keys(newState).forEach(curr => {\r\n                newState[curr as CurrencyTypes].to = curr === currencyName;\r\n            })\r\n            return newState\r\n        })\r\n    }\r\n\r\n    const onFromCurrencyChange = (currencyName: string) => {\r\n        localStorage.setItem('baseCurrencyFrom', currencyName)\r\n        setBaseCurrency(prev => {\r\n            let newState = {...prev}\r\n            Object.keys(newState).forEach(curr => {\r\n                newState[curr as CurrencyTypes].from = curr === currencyName;\r\n            })\r\n            return newState\r\n        })\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAmount(parseInt(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <div className=\"page-wrapper\">\r\n            <Header title={'Обмен валют'} buttonText={'Курс валют'} buttonHref={'/exchange_rate'}/>\r\n            <main className=\"main\">\r\n                <div className=\"container\">\r\n                    <section className=\"converter\">\r\n                        <h1 className=\"converter__title\">Текущий курс валют</h1>\r\n                        <div className=\"converter__body\">\r\n                            <div className=\"converter__controls exchange\">\r\n                                <input onChange={onChange} type=\"number\" className=\"input-field\" value={amount}/>\r\n                                <div onClick={() => setIsOpen(prev => ({...prev, from: !prev.from}))}\r\n                                     className={\"select\" + (isOpen.from ? ' open' : '')}>\r\n                                    <div className=\"select__selected\"><span>{Object.keys(baseCurrency).map(curr => {\r\n                                        if (baseCurrency[curr as CurrencyTypes].from) {\r\n                                            return curr\r\n                                        }\r\n                                    })}</span></div>\r\n                                    <ul className=\"select__list\">\r\n                                        {Object.keys(baseCurrency).map((curr, index) => {\r\n                                            if (!baseCurrency[curr as CurrencyTypes].from && !baseCurrency[curr as CurrencyTypes].to) {\r\n                                                return (\r\n                                                    <CurrencyListItem\r\n                                                        key={index}\r\n                                                        clickHandler={onFromCurrencyChange}\r\n                                                        currencyName={curr}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"converter__controls result\">\r\n                                <div className={`loading-wrapper` + (exchange.isFetching ? ' loading' : '')}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"input-field\"\r\n                                        value={exchange.changeResult.rates && !exchange.isFetching ? Object.values((exchange.changeResult as ChangeResponseType).rates)[0] as number : ''}\r\n                                        readOnly\r\n                                    />\r\n                                </div>\r\n                                <div onClick={() => setIsOpen(prev => ({...prev, to: !prev.to}))}\r\n                                     className={\"select\" + (isOpen.to ? ' open' : '')}>\r\n                                    <div className=\"select__selected\"><span>{Object.keys(baseCurrency).map(curr => {\r\n                                        if (baseCurrency[curr as CurrencyTypes].to) {\r\n                                            return curr\r\n                                        }\r\n                                    })}</span></div>\r\n                                    <ul className=\"select__list\">\r\n                                        {Object.keys(baseCurrency).map((curr, index) => {\r\n                                            if (!baseCurrency[curr as CurrencyTypes].to && !baseCurrency[curr as CurrencyTypes].from) {\r\n                                                return (\r\n                                                    <CurrencyListItem\r\n                                                        key={index}\r\n                                                        clickHandler={onToCurrencyChange}\r\n                                                        currencyName={curr}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Exchange;","import './App.css';\nimport {BrowserRouter, Switch, Route, Redirect, HashRouter} from \"react-router-dom\";\nimport ExchangeRate from \"./Components/ExchangeRate/ExchangeRate\";\nimport Exchange from \"./Components/Exchange/Exchange\";\nimport React from \"react\";\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <HashRouter>\n            <Switch>\n                <Route exact path={'/exchange_rate'} component={ExchangeRate}/>\n                <Route exact path={'/exchange'} component={Exchange}/>\n                <Route path={'/'}>\n                    <Redirect to={'/exchange_rate'}/>\n                </Route>\n            </Switch>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {exchangeRateReducer} from \"./exchange-rate-reducer\";\r\nimport {exchangeReudcer} from \"./exchange-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    exchangeRate: exchangeRateReducer,\r\n    exchange: exchangeReudcer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n\r\nexport type InferActionTypes<T extends {[key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport ReactDOM from 'react-dom';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}